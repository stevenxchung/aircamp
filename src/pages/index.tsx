import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import { api } from "~/utils/api";

import Typewriter from "typewriter-effect";

import fs from "fs";
import path from "path";

interface HomeProps {
  images: string[];
}

const Home: NextPage<HomeProps> = ({ images }) => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [currentImageIndex, setCurrentImageIndex] = useState<number>(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 5000);

    return () => {
      clearInterval(interval);
    };
  }, [images.length]);

  const landingWords = [
    "AirCamp",
    "Adventure",
    "Discovery",
    "Escape",
    "Exploration",
    "Journey",
    "Quest",
    "Venture",
  ];

  return (
    <>
      <Head>
        <title>AirCamp</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative">
        <div className="flex h-screen w-screen items-center justify-center">
          {images.map((imageUrl, index) => (
            <Image
              key={index}
              src={`/assets/${imageUrl}` ?? ""}
              alt="Landing page background"
              className={`absolute h-full w-full object-cover transition-opacity duration-3000 ${
                index === currentImageIndex ? "opacity-100" : "opacity-0"
              }`}
              width={3840}
              height={2160}
            />
          ))}
          <div className="z-10">
            <Link href={`/campgrounds`} className="hover:opacity-75">
              <div className="flex animate-fade-in-medium flex-row text-center text-4xl">
                <Typewriter
                  onInit={(typewriter) => {
                    typewriter
                      .start()
                      .callFunction(() => {
                        console.log("String typed out!");
                      })
                      .pauseFor(1000)
                      .deleteAll()
                      .callFunction(() => {
                        console.log("All strings were deleted");
                      })
                      .start();
                  }}
                  options={{
                    strings: landingWords,
                    autoStart: true,
                    loop: true,
                    cursor: ".",
                  }}
                />
              </div>
            </Link>
          </div>
        </div>
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps<HomeProps> = () => {
  const imageDirectory = path.join(process.cwd(), "public", "assets");
  const images = fs.readdirSync(imageDirectory);

  return {
    props: {
      images,
    },
  };
};

export default Home;
