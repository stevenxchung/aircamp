// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Sharing DB with the t3-twitter-lite app (https://github.com/stevenxchung/t3-twitter-lite)
model TwitterLitePost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(255)
  authorId  String

  @@index([authorId])
}

// Necessary for Next auth
model AirCampAccount {
  id                String      @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              AirCampUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AirCampSession {
  id           String      @id @default(cuid())
  sessionToken String      @unique
  userId       String
  expires      DateTime
  user         AirCampUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AirCampUser {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          AirCampAccount[]
  sessions          AirCampSession[]
  // Legacy fields
  username          String              @unique
  firstName         String
  lastName          String
  avatar            String
  bio               String
  AirCampCampground AirCampCampground[]
  AirCampComment    AirCampComment[]
}

model AirCampCampground {
  id          String           @id @default(cuid())
  ownerId     String
  owner       AirCampUser      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  // Legacy fields
  name        String
  price       String
  image       String
  description String
  location    String
  lat         Float
  lng         Float
  createdAt   DateTime         @default(now())
  comment     AirCampComment[]

  @@index([ownerId])
}

model AirCampComment {
  id           String            @id @default(cuid())
  campgroundId String
  campground   AirCampCampground @relation(fields: [campgroundId], references: [id])
  userId       String
  user         AirCampUser       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Legacy fields
  text         String
  createdAt    DateTime          @default(now())

  @@index([campgroundId])
  @@index([userId])
}

model AirCampVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
